'use client';

import React, { useEffect, useRef, useState } from 'react';
import Image from 'next/image';
import { FaFileDownload, FaArrowUp } from 'react-icons/fa';
import { motion, AnimatePresence } from 'framer-motion';
// Import D3 more explicitly to ensure it loads
import * as d3 from 'd3';
import Header from '@/components/layout/Header';
import Footer from '@/components/layout/Footer';

// Updated skills data based on your specifications
const skills = [
  { 
    name: 'Java (JDK 17)', 
    level: 80, 
    category: 'Languages',
    description: 'Primary language for backend development. Experienced with new JDK 17 features, streams, concurrency, and collections.'
  },
  { 
    name: 'Spring', 
    level: 80, 
    category: 'Frameworks',
    description: 'Expert in Spring Boot, Spring Cloud, and microservices architecture with REST APIs.'
  },
  { 
    name: 'Python', 
    level: 40, 
    category: 'Languages',
    description: 'Used for scripting, data analysis, and automation tasks.'
  },
  { 
    name: 'React', 
    level: 30, 
    category: 'Frontend',
    description: 'Building interactive user interfaces with modern React and hooks.'
  },
  { 
    name: 'Next.js', 
    level: 20, 
    category: 'Frontend',
    description: 'Creating server-rendered React applications with Next.js.'
  },
  { 
    name: 'PostgreSQL', 
    level: 60, 
    category: 'Data',
    description: 'Database design, performance tuning, and complex query optimization.'
  },
  { 
    name: 'MongoDB', 
    level: 50, 
    category: 'Data',
    description: 'Document database for flexible schema applications, including aggregation framework.'
  },
  { 
    name: 'Gradle', 
    level: 70, 
    category: 'Build & Ops',
    description: 'Build automation with custom tasks and dependency management.'
  },
  { 
    name: 'Bazel', 
    level: 60, 
    category: 'Build & Ops',
    description: 'Fast, scalable build system with incremental builds and caching.'
  },
  { 
    name: 'GitHub Actions', 
    level: 55, 
    category: 'Build & Ops',
    description: 'CI/CD workflow automation directly integrated with repositories.'
  },
  { 
    name: 'AWS', 
    level: 40, 
    category: 'Cloud',
    description: 'Experience with EC2, S3, Lambda, and other core AWS services.'
  }
];

// Reorganize content into paragraphs
const aboutMeParagraphs = [
  "Hello everyone! My name is Paul. Welcome to my home page. I have a Bachelor's degree in Computer Science from UWaterloo. I am passionate about building scalable software and have experience with backend development using Spring, as well as tools like GitHub Actions, Docker, and AWS.",
  
  "I am currently a Software Engineer at Clari with 4 years of experience. My work focuses on developing robust backend systems and improving build infrastructure. I've recently been exploring various build systems including Gradle and Bazel for better performance and scalability.",
  
  "When I'm not coding, I enjoy exploring food in the city, playing badminton, basketball, and staying fit. I'm also passionate about learning new technologies and constantly improving my skills in data structures, algorithms, and system design."
];

export default function About() {
  // Force import D3 explicitly to ensure it's available
  useEffect(() => {
    // Check if D3 is available
    if (typeof d3 === 'undefined') {
      console.error('D3 library is not available!');
    } else {
      console.log('D3 library is loaded successfully');
    }
  }, []);
  const svgRef = useRef(null);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [highlightedSkill, setHighlightedSkill] = useState(null);
  const [windowWidth, setWindowWidth] = useState(0);
  const [currentSection, setCurrentSection] = useState(0);
  const [showScrollTop, setShowScrollTop] = useState(false);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [tooltipRef, setTooltipRef] = useState(null);
  
  // Get the basePath from environment
  const basePath = process.env.NODE_ENV === 'production' ? '/next-portfolio' : '';

  const sections = [
    { id: 'intro', title: 'About Me' },
    { id: 'skills', title: 'Skills & Expertise' },
    { id: 'experience', title: 'Experience' }
  ];

  // Keyboard navigation handling
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (isTransitioning) return;
      
      if (e.key === 'ArrowDown' || e.key === 'PageDown') {
        e.preventDefault();
        if (currentSection < sections.length - 1) {
          goToSection(currentSection + 1);
        }
      } else if (e.key === 'ArrowUp' || e.key === 'PageUp') {
        e.preventDefault();
        if (currentSection > 0) {
          goToSection(currentSection - 1);
        }
      }
    };
    
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [currentSection, sections.length, isTransitioning]);

  // Handle window resize and wheel events
  useEffect(() => {
    setWindowWidth(window.innerWidth);
    
    const handleResize = () => {
      setWindowWidth(window.innerWidth);
    };
    
    // Use a ref to track whether we're handling a wheel event
    let isHandlingWheel = false;
    let wheelTimer = null;
    
    const handleWheel = (e) => {
      if (isTransitioning || isHandlingWheel) return;
      
      // Prevent natural scrolling
      e.preventDefault();
      
      // Throttle wheel events
      const delta = e.deltaY;
      if (Math.abs(delta) < 50) return;
      
      isHandlingWheel = true;
      
      if (delta > 0 && currentSection < sections.length - 1) {
        goToSection(currentSection + 1);
      } else if (delta < 0 && currentSection > 0) {
        goToSection(currentSection - 1);
      }
      
      // Reset the handling flag after a delay
      clearTimeout(wheelTimer);
      wheelTimer = setTimeout(() => {
        isHandlingWheel = false;
      }, 800); // Slightly longer than transition time
    };
    
    window.addEventListener('resize', handleResize);
    window.addEventListener('wheel', handleWheel, { passive: false });
    
    // Disable standard scrolling on the page
    document.body.style.overflow = 'hidden';
    
    return () => {
      window.removeEventListener('resize', handleResize);
      window.removeEventListener('wheel', handleWheel);
      document.body.style.overflow = '';
      clearTimeout(wheelTimer);
    };
  }, [currentSection, sections.length, isTransitioning]);

  // Initialize D3 tooltip
  useEffect(() => {
    // Create tooltip once
    if (!tooltipRef) {
      const tooltip = d3.select('body')
        .append('div')
        .attr('class', 'skills-tooltip')
        .style('position', 'absolute')
        .style('visibility', 'hidden')
        .style('background-color', 'white')
        .style('color', '#1e293b')
        .style('padding', '10px 14px')
        .style('border-radius', '8px')
        .style('box-shadow', '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)')
        .style('font-size', '14px')
        .style('max-width', '300px')
        .style('z-index', '10')
        .classed('dark:bg-gray-800 dark:text-gray-100', true);
      
      setTooltipRef(tooltip.node());
    }
    
    return () => {
      // Clean up tooltip when component unmounts
      if (tooltipRef) {
        d3.select(tooltipRef).remove();
      }
    };
  }, [tooltipRef]);

  // FIX: Create or update skills chart when component becomes visible
  useEffect(() => {
    // Ensure we're on the skills section and the component is mounted
    if (currentSection === 1 && svgRef.current) {
      // Allow time for DOM to render after transition
      const timer = setTimeout(() => {
        // Clear any existing content first
        const svg = d3.select(svgRef.current);
        svg.selectAll('*').remove();
        
        console.log("Creating skills chart, SVG dimensions:", 
                    svgRef.current.clientWidth, svgRef.current.clientHeight);
        
        createSkillsChart();
      }, 800);
      
      return () => clearTimeout(timer);
    }
  }, [currentSection, selectedCategory, highlightedSkill, windowWidth]);

  const goToSection = (index) => {
    if (index >= 0 && index < sections.length && index !== currentSection) {
      setIsTransitioning(true);
      setCurrentSection(index);
      
      // Reset transitioning state after animation completes
      setTimeout(() => {
        setIsTransitioning(false);
        
        // Update scroll to top button visibility
        setShowScrollTop(index === sections.length - 1);
      }, 700); // Match this with your transition duration
    }
  };

  const scrollToTop = () => {
    goToSection(0);
  };

  // Touch handling for swipe
  const [touchStart, setTouchStart] = useState(null);
  
  const handleTouchStart = (e) => {
    setTouchStart(e.touches[0].clientY);
  };
  
  const handleTouchMove = (e) => {
    if (!touchStart || isTransitioning) return;
    
    const touchY = e.touches[0].clientY;
    const diff = touchStart - touchY;
    
    // Threshold for swipe detection
    if (Math.abs(diff) > 50) {
      if (diff > 0 && currentSection < sections.length - 1) {
        // Swiping up, go to next section
        goToSection(currentSection + 1);
      } else if (diff < 0 && currentSection > 0) {
        // Swiping down, go to previous section
        goToSection(currentSection - 1);
      }
      setTouchStart(null);
    }
  };
  
  const handleTouchEnd = () => {
    setTouchStart(null);
  };

  // FIX: More robust skills chart creation
  const createSkillsChart = () => {
    try {
      // Ensure the SVG ref exists
      if (!svgRef.current) {
        console.error("SVG ref is null, cannot create chart");
        return;
      }

      console.log("Creating skills chart...");
      
      // Clear any existing content
      const svgElement = d3.select(svgRef.current);
      svgElement.selectAll('*').remove();
      
      // Force dimensions instead of relying on clientWidth which might be 0
      const width = 800;
      const height = 500;
      
      // Set the SVG dimensions explicitly with inline styles to ensure visibility
      svgElement
        .style('width', '100%')
        .style('height', '500px')
        .style('display', 'block')
        .style('visibility', 'visible')
        .attr('width', width)
        .attr('height', height)
        .attr('viewBox', `0 0 ${width} ${height}`)
        .classed('d3-chart', true);

      // Filter skills if a category is selected
      const filteredSkills = selectedCategory 
        ? skills.filter(skill => skill.category === selectedCategory)
        : skills;

      // Set chart dimensions
      const margin = { top: 40, right: 30, bottom: 80, left: 40 };
      const innerWidth = width - margin.left - margin.right;
      const innerHeight = height - margin.top - margin.bottom;

      // Create a group for the chart
      const g = svgElement.append('g')
        .attr('transform', `translate(${margin.left},${margin.top})`);

      // Create radial scales
      const radiusScale = d3.scaleLinear()
        .domain([0, 100])
        .range([0, innerHeight / 2]);

      const angleScale = d3.scalePoint()
        .domain(filteredSkills.map(d => d.name))
        .range([0, 2 * Math.PI]);

      // Color scale by category
      const colorScale = d3.scaleOrdinal()
        .domain(['Languages', 'Frameworks', 'Frontend', 'Data', 'Build & Ops', 'Cloud'])
        .range(['#3b82f6', '#f97316', '#ef4444', '#10b981', '#8b5cf6', '#6366f1']);

      // Add title to the chart
      svgElement.append('text')
        .attr('x', width / 2)
        .attr('y', 20)
        .attr('text-anchor', 'middle')
        .attr('font-size', '16px')
        .attr('font-weight', 'bold')
        .attr('fill', 'currentColor')
        .text(selectedCategory ? `${selectedCategory} Skills` : 'Technical Skills');

      // Add circular grid lines
      const gridCircles = [20, 40, 60, 80, 100];
      gridCircles.forEach(value => {
        g.append('circle')
          .attr('cx', innerWidth / 2)
          .attr('cy', innerHeight / 2)
          .attr('r', radiusScale(value))
          .attr('fill', 'none')
          .attr('stroke', '#e5e7eb')
          .attr('stroke-width', 1)
          .attr('stroke-dasharray', '2,2')
          .classed('dark:stroke-gray-700', true);
      });

      // Add grid labels
      gridCircles.forEach(value => {
        g.append('text')
          .attr('x', innerWidth / 2 + 5)
          .attr('y', innerHeight / 2 - radiusScale(value) + 3)
          .attr('font-size', '10px')
          .attr('fill', '#9ca3af')
          .classed('dark:fill-gray-500', true)
          .text(value);
      });

      // Create a group for each skill
      const skillGroups = g.selectAll('.skill-group')
        .data(filteredSkills)
        .enter()
        .append('g')
        .attr('class', 'skill-group')
        .attr('transform', `translate(${innerWidth / 2}, ${innerHeight / 2})`);

      // Add lines from center to max skill value
      skillGroups.append('line')
        .attr('x1', 0)
        .attr('y1', 0)
        .attr('x2', d => {
          const angle = angleScale(d.name) || 0; // Provide default of 0 if undefined
          return Math.cos(angle - Math.PI / 2) * radiusScale(100);
        })
        .attr('y2', d => {
          const angle = angleScale(d.name) || 0; // Provide default of 0 if undefined
          return Math.sin(angle - Math.PI / 2) * radiusScale(100);
        })
        .attr('stroke', '#e5e7eb')
        .attr('stroke-width', 1)
        .classed('dark:stroke-gray-700', true);

      // Add skill labels
      skillGroups.append('text')
        .attr('x', d => {
          const angle = angleScale(d.name);
          return Math.cos(angle - Math.PI / 2) * (radiusScale(100) + 20);
        })
        .attr('y', d => {
          const angle = angleScale(d.name);
          return Math.sin(angle - Math.PI / 2) * (radiusScale(100) + 20);
        })
        .attr('text-anchor', d => {
          const angle = angleScale(d.name);
          const x = Math.cos(angle - Math.PI / 2);
          return x > 0.1 ? 'start' : (x < -0.1 ? 'end' : 'middle');
        })
        .attr('alignment-baseline', d => {
          const angle = angleScale(d.name);
          const y = Math.sin(angle - Math.PI / 2);
          return y > 0.1 ? 'hanging' : (y < -0.1 ? 'text-before-edge' : 'middle');
        })
        .text(d => d.name)
        .attr('font-size', '12px')
        .attr('font-weight', d => (highlightedSkill === d.name || highlightedSkill === null) ? 'bold' : 'normal')
        .attr('fill', d => (highlightedSkill === d.name || highlightedSkill === null) 
          ? colorScale(d.category) 
          : '#9ca3af')
        .attr('cursor', 'pointer')
        .on('mouseover', (event, d) => {
          setHighlightedSkill(d.name);
          showTooltip(event, d);
        })
        .on('mouseout', () => {
          setHighlightedSkill(null);
          hideTooltip();
        });

      // Add data points with animation
      skillGroups.append('circle')
        .attr('cx', d => {
          const angle = angleScale(d.name);
          return Math.cos(angle - Math.PI / 2) * radiusScale(d.level);
        })
        .attr('cy', d => {
          const angle = angleScale(d.name);
          return Math.sin(angle - Math.PI / 2) * radiusScale(d.level);
        })
        .attr('r', 0)
        .attr('fill', d => colorScale(d.category))
        .attr('stroke', '#ffffff')
        .attr('stroke-width', 2)
        .attr('cursor', 'pointer')
        .classed('dark:stroke-gray-900', true)
        .on('mouseover', (event, d) => {
          setHighlightedSkill(d.name);
          showTooltip(event, d);
          
          d3.select(event.currentTarget)
            .transition()
            .duration(300)
            .attr('r', 8);
        })
        .on('mouseout', (event) => {
          setHighlightedSkill(null);
          hideTooltip();
          
          d3.select(event.currentTarget)
            .transition()
            .duration(300)
            .attr('r', 6);
        })
        .transition()
        .duration(1000)
        .delay((_, i) => i * 100)
        .attr('r', 6);

      // Add skill level text near each point
      skillGroups.append('text')
        .attr('x', d => {
          const angle = angleScale(d.name);
          return Math.cos(angle - Math.PI / 2) * (radiusScale(d.level) + 10);
        })
        .attr('y', d => {
          const angle = angleScale(d.name);
          return Math.sin(angle - Math.PI / 2) * (radiusScale(d.level) + 10);
        })
        .attr('text-anchor', 'middle')
        .attr('font-size', '10px')
        .attr('font-weight', 'bold')
        .attr('fill', d => colorScale(d.category))
        .text(d => d.level)
        .attr('opacity', 0)
        .transition()
        .duration(1000)
        .delay((_, i) => i * 100 + 500)
        .attr('opacity', 1);

      // Create the polygon shape for the radar chart
      const lineGenerator = d3.lineRadial()
        .angle(d => angleScale(d.name) - Math.PI / 2)
        .radius(d => radiusScale(d.level))
        .curve(d3.curveLinearClosed);

      g.append('path')
        .datum(filteredSkills)
        .attr('transform', `translate(${innerWidth / 2}, ${innerHeight / 2})`)
        .attr('d', lineGenerator)
        .attr('fill', 'rgba(59, 130, 246, 0.2)') // Light blue with transparency
        .attr('stroke', '#3b82f6')
        .attr('stroke-width', 2)
        .attr('opacity', 0)
        .classed('dark:fill-blue-500/20 dark:stroke-blue-400', true)
        .transition()
        .duration(1000)
        .attr('opacity', 1);

      function showTooltip(event, d) {
        if (!tooltipRef) return;
        
        d3.select(tooltipRef)
          .style('visibility', 'visible')
          .html(`
            <div>
              <div style="font-weight: bold; font-size: 16px; margin-bottom: 4px;">${d.name} - ${d.level}%</div>
              <div style="color: ${colorScale(d.category)}; font-weight: 600;">${d.category}</div>
              <div style="margin-top: 6px; line-height: 1.4;">${d.description}</div>
            </div>
          `)
          .style('left', `${event.pageX + 10}px`)
          .style('top', `${event.pageY + 10}px`);
      }

      function hideTooltip() {
        if (!tooltipRef) return;
        d3.select(tooltipRef).style('visibility', 'hidden');
      }

      // Add legend with more space between items
      const categories = Array.from(new Set(skills.map(d => d.category)));
      const legendGroup = svgElement.append('g')
        .attr('transform', `translate(${margin.left}, ${height - 40})`);

      const legendItems = legendGroup.selectAll('.legend-item')
        .data(categories)
        .enter()
        .append('g')
        .attr('class', 'legend-item')
        .attr('transform', (_, i) => {
          const itemWidth = 120; // Wider spacing
          const itemsPerRow = Math.floor(innerWidth / itemWidth);
          const row = Math.floor(i / itemsPerRow);
          const col = i % itemsPerRow;
          return `translate(${col * itemWidth}, ${row * 25})`; // More vertical space
        })
        .style('cursor', 'pointer')
        .on('click', (_, d) => {
          setSelectedCategory(selectedCategory === d ? null : d);
        });

      legendItems.append('rect')
        .attr('width', 14)
        .attr('height', 14)
        .attr('rx', 3)
        .attr('fill', d => colorScale(d))
        .attr('stroke', d => selectedCategory === d ? '#000' : 'none')
        .attr('stroke-width', 2)
        .classed('dark:stroke-white', true);

      legendItems.append('text')
        .attr('x', 20)
        .attr('y', 11)
        .attr('font-size', '13px')
        .style('font-weight', d => selectedCategory === d ? 'bold' : 'normal')
        .style('fill', d => selectedCategory === d ? colorScale(d) : 'currentColor')
        .text(d => d);
        
      console.log("Skills chart creation completed");
    } catch (error) {
      console.error("Error creating skills chart:", error);
    }
  };

  // Section components
  const IntroSection = () => (
    <motion.div 
      className="min-h-screen flex flex-col justify-center items-center p-8"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <div className="max-w-3xl mx-auto bg-white dark:bg-dark-card rounded-xl shadow-lg p-10 text-center md:text-left">
        <div className="flex flex-col md:flex-row items-center mb-8">
          <div className="relative h-40 w-40 rounded-full overflow-hidden border-4 border-primary-100 dark:border-primary-900 shadow-md mb-6 md:mb-0 md:mr-8">
            <Image
              src={`${basePath}/assets/images/profile.jpg`}
              alt="Paul Xu"
              fill
              className="object-cover"
              sizes="160px"
              priority
            />
          </div>
          
          <div>
            <h1 className="text-4xl font-bold mb-2 text-gray-900 dark:text-gray-100">
              Paul Xu
            </h1>
            <h2 className="text-xl text-primary-600 dark:text-primary-400 font-medium mb-3">
              Software Engineer
            </h2>
            <div className="flex justify-center md:justify-start">
              <motion.a
                href={`${basePath}/Resume.pdf`}
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center px-4 py-2 rounded-md bg-primary-600 hover:bg-primary-700 text-white transition-colors"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <FaFileDownload className="mr-2 h-4 w-4" />
                Download Resume
              </motion.a>
            </div>
          </div>
        </div>
        
        <div className="space-y-6 text-gray-700 dark:text-gray-300 font-light leading-relaxed text-lg">
          {aboutMeParagraphs.map((paragraph, index) => (
            <motion.p 
              key={index}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 + index * 0.2 }}
            >
              {paragraph}
            </motion.p>
          ))}
        </div>
      </div>
      
      <motion.div 
        className="absolute bottom-10 left-1/2 transform -translate-x-1/2"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 1.2 }}
      >
        <button 
          onClick={() => goToSection(1)}
          className="text-primary-600 dark:text-primary-400 flex flex-col items-center"
          aria-label="Scroll to Skills section"
        >
          <span className="text-sm mb-2">Scroll to see my skills</span>
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-6 w-6 animate-bounce" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
          </svg>
        </button>
      </motion.div>
    </motion.div>
  );

  // Simplified skills chart component as a fallback
const SimpleSkillsChart = ({ skills, selectedCategory, onCategorySelect }) => {
  // Filter skills by category if one is selected
  const filteredSkills = selectedCategory 
    ? skills.filter(skill => skill.category === selectedCategory)
    : skills;

  // Get all unique categories
  const categories = Array.from(new Set(skills.map(skill => skill.category)));

  // Color mapping for categories
  const getCategoryColor = (category) => {
    const colorMap = {
      'Languages': '#3b82f6',
      'Frameworks': '#f97316',
      'Frontend': '#ef4444',
      'Data': '#10b981',
      'Build & Ops': '#8b5cf6',
      'Cloud': '#6366f1'
    };
    return colorMap[category] || '#9ca3af';
  };

  return (
    <div className="space-y-6">
      {/* Category filter buttons */}
      <div className="flex flex-wrap gap-2 justify-center mb-6">
        {categories.map(category => (
          <button
            key={category}
            onClick={() => onCategorySelect(selectedCategory === category ? null : category)}
            className={`px-3 py-1.5 rounded-full text-sm font-medium transition-colors ${
              selectedCategory === category 
                ? 'bg-gray-800 text-white dark:bg-gray-100 dark:text-gray-900' 
                : 'bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'
            }`}
            style={{ 
              borderLeft: `4px solid ${getCategoryColor(category)}`,
            }}
          >
            {category}
          </button>
        ))}
      </div>
      
      {/* Skills bars */}
      {filteredSkills.map((skill) => (
        <div key={skill.name} className="relative">
          <div className="flex items-center justify-between mb-2">
            <div>
              <span 
                className="font-medium text-gray-800 dark:text-gray-200"
                style={{ color: getCategoryColor(skill.category) }}
              >
                {skill.name}
              </span>
              <span className="ml-2 text-xs text-gray-500 dark:text-gray-400">
                {skill.category}
              </span>
            </div>
            <span className="text-sm font-semibold">{skill.level}%</span>
          </div>
          
          {/* Progress bar background */}
          <div className="w-full h-2.5 bg-gray-200 dark:bg-gray-700 rounded-full">
            {/* Filled part of progress bar */}
            <div 
              className="h-2.5 rounded-full transition-all duration-500"
              style={{ 
                width: `${skill.level}%`,
                backgroundColor: getCategoryColor(skill.category)
              }}
            />
          </div>
          
          {/* Skill description on hover */}
          <div className="mt-1 text-xs text-gray-500 dark:text-gray-400 italic">
            {skill.description}
          </div>
        </div>
      ))}
    </div>
  );
};

const SkillsSection = () => {
  // State to track if the D3 chart has failed to render
  const [d3ChartFailed, setD3ChartFailed] = useState(false);
  const [chartAttempts, setChartAttempts] = useState(0);
  
  // Use useEffect to manually trigger rendering of the SVG when this component mounts
  React.useEffect(() => {
    if (currentSection === 1) {
      console.log("SkillsSection mounted");
      
      // Try to initialize the D3 chart with retry logic
      if (chartAttempts < 3) {
        try {
          if (svgRef.current) {
            console.log(`Chart creation attempt ${chartAttempts + 1}`);
            // Clear existing content first
            d3.select(svgRef.current).selectAll('*').remove();
            
            // Schedule chart creation with increasing delay for each retry
            setTimeout(() => {
              try {
                createSkillsChart();
                // Check if chart rendered anything after creation
                if (svgRef.current && svgRef.current.childNodes.length === 0) {
                  console.warn("Chart created but no elements rendered");
                  throw new Error("Chart creation produced no elements");
                }
              } catch (error) {
                console.error("Failed to create D3 chart:", error);
                setChartAttempts(prev => prev + 1);
                if (chartAttempts >= 2) {
                  setD3ChartFailed(true);
                }
              }
            }, 800 + (chartAttempts * 500)); // Increase delay with each attempt
          } else {
            console.error("SVG ref is null");
            setD3ChartFailed(true);
          }
        } catch (error) {
          console.error("Error initializing D3 chart:", error);
          setD3ChartFailed(true);
        }
      } else {
        // After 3 attempts, switch to fallback
        setD3ChartFailed(true);
      }
    }
  }, [currentSection, chartAttempts]);

  return (
    <motion.div 
      className="min-h-screen flex flex-col justify-center items-center p-8"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <div className="max-w-5xl w-full mx-auto bg-white dark:bg-dark-card rounded-xl shadow-lg p-6 md:p-10">
        <h2 className="text-3xl font-bold mb-6 text-gray-900 dark:text-gray-100 text-center">
          Skills & Expertise
        </h2>
        
        <div className="text-gray-600 dark:text-gray-300 mb-6 text-center">
          <p className="mb-2">
            {d3ChartFailed ? (
              <>View my skill levels across different technology categories.</>
            ) : (
              <>Click on categories in the legend to filter skills, or hover over points for details.</>
            )}
            {selectedCategory && (
              <button 
                className="ml-2 text-primary-600 hover:text-primary-700 dark:text-primary-400 font-medium"
                onClick={() => setSelectedCategory(null)}
              >
                Clear filter
              </button>
            )}
          </p>
          <p className="text-sm text-gray-500 dark:text-gray-400">
            {d3ChartFailed ? (
              <>Select a category to filter or view all skills</>
            ) : (
              <>The chart visualizes my proficiency level (0-100) in various technologies</>
            )}
          </p>
        </div>
        
        {/* Show either the D3 chart or fallback component based on render success */}
        {d3ChartFailed ? (
          <SimpleSkillsChart 
            skills={skills} 
            selectedCategory={selectedCategory}
            onCategorySelect={setSelectedCategory}
          />
        ) : (
          <div className="skill-chart-container relative" style={{ height: '500px' }}>
            {/* SVG container for D3 chart */}
            <svg 
              ref={svgRef} 
              width="100%" 
              height="500" 
              className="svg-container d3-chart"
              style={{ 
                display: 'block', 
                visibility: 'visible',
                background: 'transparent' 
              }}
            ></svg>
            
            {/* Loading indicator for the D3 chart */}
            <div 
              className={`absolute inset-0 flex items-center justify-center ${
                svgRef.current?.childNodes?.length > 5 ? 'opacity-0 pointer-events-none' : 'opacity-100'
              }`}
              style={{ transition: 'opacity 0.3s ease' }}
            >
              <div className="animate-spin rounded-full h-12 w-12 border-4 border-primary-600 border-t-transparent"></div>
            </div>
          </div>
        )}
      </div>
      
      <motion.div 
        className="absolute bottom-10 left-1/2 transform -translate-x-1/2"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 1 }}
      >
        <button 
          onClick={() => goToSection(2)}
          className="text-primary-600 dark:text-primary-400 flex flex-col items-center"
          aria-label="Scroll to Experience section"
        >
          <span className="text-sm mb-2">View my experience</span>
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-6 w-6 animate-bounce" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
          </svg>
        </button>
      </motion.div>
    </motion.div>
  );
};

  const ExperienceSection = () => (
    <motion.div 
      className="min-h-screen flex flex-col justify-center items-center p-8"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <div className="max-w-4xl w-full mx-auto bg-white dark:bg-dark-card rounded-xl shadow-lg p-6 md:p-10">
        <h2 className="text-3xl font-bold mb-10 text-gray-900 dark:text-gray-100 text-center">
          Professional Experience
        </h2>
        
        <div className="space-y-12">
          <motion.div 
            className="relative pl-8 border-l-4 border-primary-500 dark:border-primary-400"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.2 }}
          >
            <div className="absolute -left-3 top-0 w-6 h-6 rounded-full bg-primary-500 dark:bg-primary-400 border-4 border-white dark:border-dark-card"></div>
            <h3 className="text-2xl font-semibold text-gray-800 dark:text-gray-200">Software Engineer</h3>
            <div className="flex flex-wrap items-center gap-2 mb-3">
              <span className="text-primary-600 dark:text-primary-400 font-medium">Clari</span>
              <span className="text-gray-500 dark:text-gray-400">•</span>
              <span className="text-gray-600 dark:text-gray-300">2021 - Present</span>
              <span className="bg-primary-100 dark:bg-primary-900/30 text-primary-700 dark:text-primary-300 px-2 py-1 rounded-full text-xs">Full-time</span>
            </div>
            <div className="text-gray-600 dark:text-gray-300 space-y-3">
              <p>
                Lead backend infrastructure development using Java and Spring Boot, creating scalable microservices for enterprise clients.
              </p>
              <p>
                Implemented and optimized build systems with Gradle and Bazel, improving build times by 35% across the organization.
              </p>
              <p>
                Collaborated with cross-functional teams to design and deploy cloud-native solutions with Docker and AWS.
              </p>
            </div>
          </motion.div>
          
          <motion.div 
            className="relative pl-8 border-l-4 border-gray-300 dark:border-gray-700"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.4 }}
          >
            <div className="absolute -left-3 top-0 w-6 h-6 rounded-full bg-gray-300 dark:bg-gray-700 border-4 border-white dark:border-dark-card"></div>
            <h3 className="text-2xl font-semibold text-gray-800 dark:text-gray-200">Volunteer</h3>
            <div className="flex flex-wrap items-center gap-2 mb-3">
              <span className="text-gray-700 dark:text-gray-300 font-medium">MongoDB Local Event</span>
              <span className="text-gray-500 dark:text-gray-400">•</span>
              <span className="text-gray-600 dark:text-gray-300">2023</span>
              <span className="bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-2 py-1 rounded-full text-xs">Community</span>
            </div>
            <div className="text-gray-600 dark:text-gray-300 space-y-3">
              <p>
                Assisted in organizing and running MongoDB's local developer event, helping with registration, technical setup, and speaker coordination.
              </p>
              <p>
                Participated in hands-on workshops and contributed to discussions about MongoDB best practices and use cases.
              </p>
            </div>
          </motion.div>
        </div>
      </div>
      
      {/* Scroll to top button appears only in the last section */}
      {showScrollTop && (
        <motion.button
          className="fixed bottom-10 right-10 bg-primary-500 dark:bg-primary-600 text-white p-3 rounded-full shadow-lg z-10"
          onClick={scrollToTop}
          initial={{ opacity: 0, scale: 0.5 }}
          animate={{ opacity: 1, scale: 1 }}
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
          aria-label="Scroll to top"
        >
          <FaArrowUp className="h-5 w-5" />
        </motion.button>
      )}
    </motion.div>
  );

  // Main render with fixed header/footer logic
  return (
    <div 
      className="h-screen w-screen snap-y snap-mandatory overflow-hidden bg-gray-50 dark:bg-dark-background relative"
      onTouchStart={handleTouchStart}
      onTouchMove={handleTouchMove}
      onTouchEnd={handleTouchEnd}
    >
      {/* Absolutely positioned Header, only shown for specific sections */}
      <div className={`absolute top-0 left-0 right-0 z-50 transition-opacity duration-300 ${
        currentSection === 0 ? 'opacity-100' : 'opacity-0 pointer-events-none'
      }`}>
        <Header />
      </div>
      
      <main className="h-full w-full">
        <AnimatePresence mode="wait">
          {currentSection === 0 && (
            <div key="intro" className="h-full w-full snap-start">
              <IntroSection />
            </div>
          )}
          
          {currentSection === 1 && (
            <div key="skills" className="h-full w-full snap-start">
              <SkillsSection />
            </div>
          )}
          
          {currentSection === 2 && (
            <div key="experience" className="h-full w-full snap-start">
              <ExperienceSection />
            </div>
          )}
        </AnimatePresence>
      </main>
      
      {/* Absolutely positioned Footer, only shown for specific sections */}
      <div className={`absolute bottom-0 left-0 right-0 z-50 transition-opacity duration-300 ${
        currentSection === 2 ? 'opacity-100' : 'opacity-0 pointer-events-none'
      }`}>
        <Footer />
      </div>
      
      {/* Navigation indicator */}
      <div className="fixed right-6 top-1/2 transform -translate-y-1/2 z-10">
        <div className="flex flex-col space-y-2">
          {sections.map((section, index) => (
            <button
              key={section.id}
              onClick={() => goToSection(index)}
              className={`h-3 w-3 rounded-full transition-all duration-300 ${
                currentSection === index 
                  ? 'bg-primary-600 dark:bg-primary-400 w-4 h-4' 
                  : 'bg-gray-300 dark:bg-gray-700'
              }`}
              aria-label={`Go to ${section.title} section`}
            />
          ))}
        </div>
      </div>
    </div>
  );
}